"use strict";require("../../js/app"),require("../../js/controllers"),require("../../js/services"),require("../../js/filters"),require("../../js/factories"),angular.module("btford.modal",[]).factory("btfModal",function($animate,$compile,$rootScope,$controller,$q,$http,$templateCache){return function(config){function activate(locals){return html.then(function(html){element||attach(html,locals)})}function attach(html,locals){if(element=angular.element(html),0===element.length)throw new Error("The template contains no elements; you need to wrap text nodes");if($animate.enter(element,container),scope=$rootScope.$new(),locals)for(var prop in locals)scope[prop]=locals[prop];var ctrl=$controller(controller,{$scope:scope});controllerAs&&(scope[controllerAs]=ctrl),$compile(element)(scope)}function deactivate(){var deferred=$q.defer();return element?$animate.leave(element,function(){scope.$destroy(),element=null,deferred.resolve()}):deferred.resolve(),deferred.promise}function active(){return!!element}if(!(!config.template^!config.templateUrl))throw new Error("Expected modal to have exacly one of either `template` or `templateUrl`");var html,scope,controller=(config.template,config.controller||angular.noop),controllerAs=config.controllerAs,container=angular.element(config.container||document.body),element=null;if(config.template){var deferred=$q.defer();deferred.resolve(config.template),html=deferred.promise}else html=$http.get(config.templateUrl,{cache:$templateCache}).then(function(response){return response.data});return{activate:activate,deactivate:deactivate,active:active}}}),angular.module("stBlurredDialog",[]).constant("stBlurredDialogClasses",{blurredRegion:"st-blurred-region"}).factory("stBlurredDialog",["$timeout",function($timeout){var state={subscribers:[],isOpen:!1,dialogData:null};return{open:function(pathToTemplate,data){$timeout(function(){state.dialogData=data,state.isOpen=!0,angular.forEach(state.subscribers,function(subscriberCb){subscriberCb(state.isOpen,pathToTemplate)})})},close:function(){$timeout(function(){state.isOpen=!1,angular.forEach(state.subscribers,function(subscriberCb){subscriberCb(state.isOpen)})})},isOpen:function(){return state.isOpen},getDialogData:function(){return state.dialogData},subscribe:function(cb){state.subscribers.push(cb)}}}]).directive("stBlurredDialogRegion",[function(){return{restrict:"A",scope:{},controller:["$scope","stBlurredDialog","$element","stBlurredDialogClasses",function($scope,stBlurredDialog,$element,stBlurredDialogClasses){stBlurredDialog.subscribe(function(isOpen){isOpen?$element.addClass(stBlurredDialogClasses.blurredRegion):$element.removeClass(stBlurredDialogClasses.blurredRegion)})}],link:function(){}}}]).directive("stBlurredDialogOverlay",[function(){return{restrict:"E",scope:{},replace:!0,template:"<div ng-if='model.isOpen' class='st-blurred-region-overlay'><div style='text-align:right;'><button ng-click='close()' class='st-blurred-region-close'>&#10006;</button></div><div ng-include src='model.pathToTemplate'></p></div>",controller:["$scope","stBlurredDialog","$element",function($scope,stBlurredDialog){$scope.model={isOpen:!1,pathToTemplate:null},stBlurredDialog.subscribe(function(isOpen,path){$scope.model.isOpen=isOpen,$scope.model.pathToTemplate=path}),$scope.close=function(){stBlurredDialog.close()}}],link:function(){}}}]);